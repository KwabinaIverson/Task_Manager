{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  name: 'Task',\n  props: ['userId'],\n  data() {\n    return {\n      taskName: '',\n      taskDate: '',\n      newName: '',\n      newDate: '',\n      newTaskId: '',\n      tasks: [],\n      showUpdateForm: false\n    };\n  },\n  methods: {\n    onDelete(id) {\n      if (confirm('Are you sure you want to delete this task?')) {\n        this.tasks = this.tasks.filter(task => task.id !== id);\n\n        // Also send the delete request to the server using fetch\n        fetch(`api/tasks/${id}`, {\n          method: 'DELETE'\n        });\n      }\n    },\n    createTask() {\n      // Add your logic here to create a new task\n      let task = {\n        title: this.taskName,\n        date: this.taskDate,\n        status: 'pending',\n        user_id: this.userId\n      };\n      this.tasks.push(task);\n\n      // Also send the task to the server using fetch\n      fetch('api/tasks', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(task)\n      });\n\n      // Reset the taskName after creating the task\n      this.taskName = '';\n      this.taskDate = '';\n    },\n    async updateTask(id) {\n      // Find the task in the tasks array\n      // Update the task properties\n      const taskToUpdate = this.tasks.find(task => task.id === id);\n      taskToUpdate.title = this.newName;\n      taskToUpdate.date = this.newDate;\n\n      // Add your logic here to update the task\n      fetch(`api/tasks/${id}`, {\n        method: 'PATCH',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          title: this.newName,\n          date: this.newDate\n        })\n      })\n\n      // Reset the taskName after creating the task\n      .then(() => {\n        this.newName = '';\n        this.newDate = '';\n      });\n    },\n    showForm(id) {\n      if (confirm('Are you sure you want to update this task?')) {\n        this.showUpdateForm = true;\n        this.newTaskId = id;\n      }\n    },\n    closeForm(e) {\n      e.preventDefault();\n      this.updateTask(this.newTaskId);\n      this.showUpdateForm = false;\n    },\n    async fetchTasks() {\n      // Fetch tasks from server\n      const res = await fetch('api/tasks');\n      const data = await res.json();\n      return data;\n    }\n  },\n  async created() {\n    // Fetch the tasks from the server that belong to the user\n    const allTasks = await this.fetchTasks();\n    this.tasks = allTasks.filter(task => task.user_id === this.userId);\n  }\n};","map":{"version":3,"names":["name","props","data","taskName","taskDate","newName","newDate","newTaskId","tasks","showUpdateForm","methods","onDelete","id","confirm","filter","task","fetch","method","createTask","title","date","status","user_id","userId","push","headers","body","JSON","stringify","updateTask","taskToUpdate","find","then","showForm","closeForm","e","preventDefault","fetchTasks","res","json","created","allTasks"],"sources":["/Users/wolf/Hub4Codes/task_management_app/task_management_ui/src/components/Task.vue"],"sourcesContent":["<template>\n  <div>\n    <h1>Create a New Task</h1>\n    <form @submit.prevent=\"createTask\">\n      <p>Task Name:\n        <input type=\"text\" id=\"taskName\" v-model=\"taskName\" required>\n      </p>\n      <p>Task Date: \n        <input type=\"datetime-local\" id=\"taskDate\" v-model=\"taskDate\" required>\n      </p>\n      <p>User ID: {{ userId }}</p>\n      <button type=\"submit\">Create Task</button>\n    </form>\n  </div>\n  <div class=\"update-task\" v-if=\"showUpdateForm\">\n    <h1>\n      Update Task Form\n      <i @click=\"closeForm\" class=\"fas fa-times\"></i>\n    </h1>\n    <form @submit.prevent=\"updateTask\">\n      <p>Task Name: <input type=\"text\" id=\"updateName\" v-model=\"newName\"></p>\n      <p>Task Date: <input type=\"datetime-local\" id=\"updateDate\" v-model=\"newDate\"></p>\n      <button type=\"submit\">Update Task</button>\n    </form>\n  </div>\n  <div>\n    <h1>Task Tracker</h1>\n    <ul>\n      <li v-for=\"task in tasks\" :key=\"task.name\" @click=\"showForm(task.id)\">\n        {{ task.title }} --> {{ task.date }}\n        <i @click=\"onDelete(task.id)\" class=\"fas fa-times\"></i>\n      </li>\n    </ul>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'Task',\n  props: ['userId'],\n  data() {\n    return {\n      taskName: '',\n      taskDate: '',\n      newName: '',\n      newDate: '',\n      newTaskId: '',\n      tasks: [],\n      showUpdateForm: false\n    };\n  },\n  methods: {\n    onDelete(id) {\n      if (confirm('Are you sure you want to delete this task?')) {\n        this.tasks = this.tasks.filter(task => task.id !== id);\n\n      // Also send the delete request to the server using fetch\n        fetch(`api/tasks/${id}`, {\n          method: 'DELETE'\n        })\n      }\n    },\n    createTask() {\n      // Add your logic here to create a new task\n      let task = {\n        title: this.taskName,\n        date: this.taskDate,\n        status: 'pending',\n        user_id: this.userId\n      }\n      this.tasks.push(task);\n\n      // Also send the task to the server using fetch\n      fetch('api/tasks', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(task)\n      });\n\n      // Reset the taskName after creating the task\n      this.taskName = '';\n      this.taskDate = '';\n    },\n    async updateTask(id) {\n      // Find the task in the tasks array\n      // Update the task properties\n      const taskToUpdate = this.tasks.find(task => task.id === id);\n      taskToUpdate.title = this.newName;\n      taskToUpdate.date = this.newDate;\n      \n      // Add your logic here to update the task\n      fetch(`api/tasks/${id}`, {\n        method: 'PATCH',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          title: this.newName,\n          date: this.newDate\n        })\n      })\n\n      // Reset the taskName after creating the task\n      .then(() => {\n        this.newName = '';\n        this.newDate = '';\n      })\n      },\n    showForm(id) {\n      if (confirm('Are you sure you want to update this task?')) {\n        this.showUpdateForm = true;\n        this.newTaskId = id;\n      }\n    },\n    closeForm(e) {\n      e.preventDefault();\n      this.updateTask(this.newTaskId);\n      this.showUpdateForm = false;\n    },\n    async fetchTasks() {\n      // Fetch tasks from server\n      const res = await fetch('api/tasks')\n      const data = await res.json()\n\n      return data\n    }\n  },\n  async created() {\n    // Fetch the tasks from the server that belong to the user\n    const allTasks = await this.fetchTasks();\n    this.tasks = allTasks.filter(task => task.user_id === this.userId);\n  }\n}\n\n</script>\n\n<style scoped>\n  .fas {\n    color: red;\n  }\n\n  button {\n    position: relative;\n    width: 35%;\n    transition-duration: 0.4s;\n  }\n\n  button:hover {\n    background: #00ff80;\n  }\n\n  ul {\n    color: wheat;\n  }\n\n  li {\n    color: wheat;\n    cursor: pointer;\n  }\n\n  .update-task {\n    display: block;\n    background: #94a39c;\n    min-width: max-content;\n    min-height: max-content;\n  }\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}