{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  name: 'Task',\n  props: ['userId'],\n  data() {\n    return {\n      taskName: '',\n      taskDate: '',\n      tasks: []\n    };\n  },\n  methods: {\n    onDelete(id) {\n      this.tasks = this.tasks.filter(task => task.id !== id);\n\n      // Also send the delete request to the server using fetch\n      fetch(`api/tasks/${id}`);\n    },\n    createTask() {\n      // Add your logic here to create a new task\n      let task = {\n        title: this.taskName,\n        date: this.taskDate,\n        status: 'pending',\n        user_id: this.userId\n      };\n      this.tasks.push(task);\n\n      // Also send the task to the server using fetch\n      fetch('api/tasks', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(task)\n      });\n\n      // Reset the taskName after creating the task\n      this.taskName = '';\n      this.taskDate = '';\n    },\n    async fetchTasks() {\n      // Fetch tasks from server\n      const res = await fetch('api/tasks');\n      const data = await res.json();\n      return data;\n    }\n  },\n  async created() {\n    // Fetch the tasks from the server that belong to the user\n    const allTasks = await this.fetchTasks();\n    this.tasks = allTasks.filter(task => task.user_id === this.userId);\n  }\n};","map":{"version":3,"names":["name","props","data","taskName","taskDate","tasks","methods","onDelete","id","filter","task","fetch","createTask","title","date","status","user_id","userId","push","method","headers","body","JSON","stringify","fetchTasks","res","json","created","allTasks"],"sources":["/Users/wolf/Hub4Codes/task_management_app/task_management_ui/src/components/Task.vue"],"sourcesContent":["<template>\n  <div>\n    <h1>Create a New Task</h1>\n    <form @submit.prevent=\"createTask\">\n      <p>Task Name:\n        <input type=\"text\" id=\"taskName\" v-model=\"taskName\" required>\n      </p>\n      <p>Task Date: \n        <input type=\"datetime-local\" id=\"taskDate\" v-model=\"taskDate\" required>\n      </p>\n      <p>User ID: {{ userId }}</p>\n      <button type=\"submit\">Create Task</button>\n    </form>\n  </div>\n  <div>\n    <h1>Tasks</h1>\n    <ul>\n      <li v-for=\"task in tasks\" :key=\"task.name\">\n        {{ task.title }} --> {{ task.date }}\n        <i @click=\"onDelete(task.id)\" class=\"fas fa-times\"></i>\n      </li>\n    </ul>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'Task',\n  props: ['userId'],\n  data() {\n    return {\n      taskName: '',\n      taskDate: '',\n      tasks: [],\n    };\n  },\n  methods: {\n    onDelete(id) {\n      this.tasks = this.tasks.filter(task => task.id !== id);\n\n      // Also send the delete request to the server using fetch\n      fetch(`api/tasks/${id}`)\n    },\n    createTask() {\n      // Add your logic here to create a new task\n      let task = {\n        title: this.taskName,\n        date: this.taskDate,\n        status: 'pending',\n        user_id: this.userId\n      }\n      this.tasks.push(task);\n\n      // Also send the task to the server using fetch\n      fetch('api/tasks', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(task)\n      });\n\n      // Reset the taskName after creating the task\n      this.taskName = '';\n      this.taskDate = '';\n    },\n    async fetchTasks() {\n      // Fetch tasks from server\n      const res = await fetch('api/tasks')\n      const data = await res.json()\n\n      return data\n    }\n  },\n  async created() {\n    // Fetch the tasks from the server that belong to the user\n    const allTasks = await this.fetchTasks();\n    this.tasks = allTasks.filter(task => task.user_id === this.userId);\n  }\n}\n\n</script>\n\n<style scoped>\n  .fas {\n    color: red;\n  }\n\n  button {\n    position: relative;\n    width: 35%;\n  }\n\n  ul {\n    color: wheat;\n  }\n\n  li {\n    color: wheat;\n  }\n</style>\n"],"mappings":";AA0BA,eAAe;EACbA,IAAI,EAAE,MAAM;EACZC,KAAK,EAAE,CAAC,QAAQ,CAAC;EACjBC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,QAAQ,EAAE,EAAE;MACZC,QAAQ,EAAE,EAAE;MACZC,KAAK,EAAE;IACT,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACPC,QAAQA,CAACC,EAAE,EAAE;MACX,IAAI,CAACH,KAAI,GAAI,IAAI,CAACA,KAAK,CAACI,MAAM,CAACC,IAAG,IAAKA,IAAI,CAACF,EAAC,KAAMA,EAAE,CAAC;;MAEtD;MACAG,KAAK,CAAE,aAAYH,EAAG,EAAC;IACzB,CAAC;IACDI,UAAUA,CAAA,EAAG;MACX;MACA,IAAIF,IAAG,GAAI;QACTG,KAAK,EAAE,IAAI,CAACV,QAAQ;QACpBW,IAAI,EAAE,IAAI,CAACV,QAAQ;QACnBW,MAAM,EAAE,SAAS;QACjBC,OAAO,EAAE,IAAI,CAACC;MAChB;MACA,IAAI,CAACZ,KAAK,CAACa,IAAI,CAACR,IAAI,CAAC;;MAErB;MACAC,KAAK,CAAC,WAAW,EAAE;QACjBQ,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACb,IAAI;MAC3B,CAAC,CAAC;;MAEF;MACA,IAAI,CAACP,QAAO,GAAI,EAAE;MAClB,IAAI,CAACC,QAAO,GAAI,EAAE;IACpB,CAAC;IACD,MAAMoB,UAAUA,CAAA,EAAG;MACjB;MACA,MAAMC,GAAE,GAAI,MAAMd,KAAK,CAAC,WAAW;MACnC,MAAMT,IAAG,GAAI,MAAMuB,GAAG,CAACC,IAAI,CAAC;MAE5B,OAAOxB,IAAG;IACZ;EACF,CAAC;EACD,MAAMyB,OAAOA,CAAA,EAAG;IACd;IACA,MAAMC,QAAO,GAAI,MAAM,IAAI,CAACJ,UAAU,CAAC,CAAC;IACxC,IAAI,CAACnB,KAAI,GAAIuB,QAAQ,CAACnB,MAAM,CAACC,IAAG,IAAKA,IAAI,CAACM,OAAM,KAAM,IAAI,CAACC,MAAM,CAAC;EACpE;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}